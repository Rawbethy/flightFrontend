{"ast":null,"code":"var _jsxFileName = \"/home/robert/Self/Projects/flightFrontend/src/components/Utils/autofill.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { ContextData } from '../../App';\nimport '../styles/form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutofillInput = ({\n  dest\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [citiesList, setCitiesList] = useState([]);\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n  const [selectedAirport, setSelectedAirport] = useState(null);\n  const [hoverOptionIndex, setHoverOptionIndex] = useState(-1);\n  const [currListLen, setCurrListLen] = useState(-1);\n  const {\n    portDict,\n    setValues\n  } = useContext(ContextData);\n  const dropdownRef = useRef(null);\n  const getCurrListLen = list => {\n    var len = 0;\n    list.forEach(city => {\n      len += 1;\n      portDict[city].forEach(() => {\n        len += 1;\n      });\n    });\n    return len;\n  };\n  const handleInputChange = event => {\n    const inputText = event.target.value;\n    setInputValue(inputText);\n    setHoverOptionIndex(-1);\n    var cities = [];\n    if (inputText === '') {\n      setCurrListLen(-1);\n      return;\n    }\n    // Check if the input matches any regex pattern in the dictionary\n\n    try {\n      const regex = new RegExp('^' + inputText, 'i');\n      for (const pattern in portDict) {\n        if (regex.test(pattern)) {\n          cities.push(pattern);\n        }\n      }\n      setCitiesList(cities);\n      setDropdownVisible(cities.length > 0);\n      setCurrListLen(getCurrListLen(cities));\n    } catch {}\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'ArrowUp' || event.key === 'ArrowDown' || event.key === 'Enter') {\n      event.preventDefault();\n      const increment = event.key === 'ArrowDown' ? 1 : -1;\n      const newIndex = hoverOptionIndex + increment;\n      if (newIndex < 0) {\n        setHoverOptionIndex(-1);\n      } else if (newIndex > currListLen) {\n        setHoverOptionIndex(currListLen);\n      } else {\n        setHoverOptionIndex(newIndex);\n      }\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        var currOpt = -1;\n        var set = false;\n        citiesList.forEach(city => {\n          currOpt += 1;\n          portDict[city].forEach(port => {\n            currOpt += 1;\n            if (currOpt === hoverOptionIndex) {\n              set = true;\n              handleDropdownSelection(city, port);\n            }\n          });\n        });\n        if (!set) {\n          handleCitySelection(citiesList[hoverOptionIndex]);\n        }\n      }\n    }\n  };\n  const handleDropdownSelection = (city, port) => {\n    var lowerCity = city.toLowerCase();\n    if (dest === 'depCity') {\n      setValues(prevValues => ({\n        ...prevValues,\n        depCity: city,\n        depPort: port[0]\n      }));\n    } else if (dest === 'arrCity') {\n      setValues(prevValues => ({\n        ...prevValues,\n        arrCity: city,\n        arrPort: port[0]\n      }));\n    }\n    setSelectedAirport(port[0]);\n    setInputValue(`${lowerCity.replace(/\\b\\w/g, (char, index) => char.toUpperCase())} (${port[0]})`);\n    setDropdownVisible(false);\n  };\n  const handleCitySelection = city => {\n    var ports = [];\n    var lowerCity = city.toLowerCase();\n    var inputString = `${lowerCity.replace(/\\b\\w/g, (char, index) => char.toUpperCase())} `;\n    portDict[city].forEach(port => {\n      ports.push(port[0]);\n      inputString += `(${port[0]}) `;\n    });\n    if (dest === 'depCity') {\n      setValues(prevValues => ({\n        ...prevValues,\n        depCity: city,\n        depPort: ports\n      }));\n    } else if (dest === 'arrCity') {\n      setValues(prevValues => ({\n        ...prevValues,\n        arrCity: city,\n        arrPort: ports\n      }));\n    }\n    setSelectedAirport(ports);\n    setDropdownVisible(false);\n    setInputValue(inputString);\n  };\n  const handleClickOutside = event => {\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n      setDropdownVisible(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  useEffect(() => {\n    setInputValue(inputValue);\n    setCitiesList(citiesList);\n    setHoverOptionIndex(hoverOptionIndex);\n    setCurrListLen(currListLen);\n  }, [inputValue, citiesList, hoverOptionIndex, currListLen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputText\",\n      type: \"text\",\n      value: inputValue !== selectedAirport ? inputValue : selectedAirport,\n      onChange: handleInputChange,\n      onKeyDown: handleKeyDown,\n      placeholder: \"Type something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), dropdownVisible && inputValue !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: dropdownRef,\n      className: \"dropdown\",\n      children: citiesList.map((city, cityIndex) => {\n        if (portDict[city]) {\n          const totalPreviousAirports = citiesList.slice(0, cityIndex).reduce((total, prevCity) => total + (portDict[prevCity] ? portDict[prevCity].length : 0), 0);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdownOption\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `cityButton ${Math.round(totalPreviousAirports + cityIndex) === hoverOptionIndex ? 'hovered' : ''}`,\n              onClick: () => handleCitySelection(city),\n              children: city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 37\n            }, this), portDict[city].map((port, portIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `portButton ${totalPreviousAirports + cityIndex + portIndex + 1 === hoverOptionIndex ? 'hovered' : ''}`,\n              onClick: () => handleDropdownSelection(city, port),\n              children: [port[1], \" (\", port[0], \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 41\n            }, this))]\n          }, cityIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 33\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n_s(AutofillInput, \"ZYGhr0OoabWo26f1fDtldDLWj6w=\");\n_c = AutofillInput;\nexport default AutofillInput;\nvar _c;\n$RefreshReg$(_c, \"AutofillInput\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useRef","ContextData","jsxDEV","_jsxDEV","AutofillInput","dest","_s","inputValue","setInputValue","citiesList","setCitiesList","dropdownVisible","setDropdownVisible","selectedAirport","setSelectedAirport","hoverOptionIndex","setHoverOptionIndex","currListLen","setCurrListLen","portDict","setValues","dropdownRef","getCurrListLen","list","len","forEach","city","handleInputChange","event","inputText","target","value","cities","regex","RegExp","pattern","test","push","length","handleKeyDown","key","preventDefault","increment","newIndex","currOpt","set","port","handleDropdownSelection","handleCitySelection","lowerCity","toLowerCase","prevValues","depCity","depPort","arrCity","arrPort","replace","char","index","toUpperCase","ports","inputString","handleClickOutside","current","contains","document","addEventListener","removeEventListener","className","children","type","onChange","onKeyDown","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","cityIndex","totalPreviousAirports","slice","reduce","total","prevCity","Math","round","onClick","portIndex","_c","$RefreshReg$"],"sources":["/home/robert/Self/Projects/flightFrontend/src/components/Utils/autofill.tsx"],"sourcesContent":["import React, {useEffect, useState, useContext, useRef} from 'react';\nimport {ContextData} from '../../App'\nimport '../styles/form.css'\nimport { exit } from 'process';\n\nconst AutofillInput = ({dest}: {dest: string}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const [citiesList, setCitiesList] = useState<string[]>([])\n    const [dropdownVisible, setDropdownVisible] = useState(false);\n    const [selectedAirport, setSelectedAirport] = useState<string | string[] | null>(null);\n    const [hoverOptionIndex, setHoverOptionIndex] = useState<number>(-1);\n    const [currListLen, setCurrListLen] = useState<number>(-1);\n    const {portDict, setValues} = useContext(ContextData);\n    const dropdownRef = useRef<HTMLDivElement | null>(null);\n    \n\n    const getCurrListLen = (list: string[]) => {\n        var len = 0;\n        list.forEach((city) => {\n            len += 1;\n            portDict[city].forEach(() => {\n                len += 1\n            })\n        })\n        return len;\n    }\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const inputText = event.target.value;\n        setInputValue(inputText);\n        setHoverOptionIndex(-1);\n        var cities: string[] = []\n        if(inputText === '') {\n            setCurrListLen(-1);\n            return;\n        }\n        // Check if the input matches any regex pattern in the dictionary\n\n        try {\n            const regex = new RegExp('^' + inputText, 'i');\n            for (const pattern in portDict) {\n                if (regex.test(pattern)) {\n                    cities.push(pattern);\n                }\n            }\n            setCitiesList(cities);\n            setDropdownVisible(cities.length > 0);\n            setCurrListLen(getCurrListLen(cities));\n        } catch {}\n\n    };\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if(event.key === 'ArrowUp' || event.key === 'ArrowDown' || event.key === 'Enter') {\n            event.preventDefault();\n\n            const increment = event.key === 'ArrowDown' ? 1 : -1;\n            const newIndex = hoverOptionIndex + increment;\n            if(newIndex < 0) {\n                setHoverOptionIndex(-1);\n            }\n            else if(newIndex > currListLen) {\n                setHoverOptionIndex(currListLen);\n            }\n            else {\n                setHoverOptionIndex(newIndex);\n            }\n\n            if(event.key === 'Enter') {\n                event.preventDefault();\n                var currOpt = -1;\n                var set = false;\n                citiesList.forEach((city) => {\n                    currOpt += 1;\n                    portDict[city].forEach((port) => {\n                        currOpt += 1;\n                        if(currOpt === hoverOptionIndex) {\n                            set = true;\n                            handleDropdownSelection(city, port);\n                        }\n                    })\n                })\n                if(!set) {\n                    handleCitySelection(citiesList[hoverOptionIndex]);\n                }\n            }\n        }\n    }\n\n    const handleDropdownSelection = (city: string, port: string) => {\n        var lowerCity = city.toLowerCase();\n        if(dest === 'depCity') {\n            setValues((prevValues) => ({\n                ...prevValues,\n                depCity: city,\n                depPort: port[0]\n            }))\n        }\n        else if(dest === 'arrCity') {\n            setValues((prevValues) => ({\n                ...prevValues,\n                arrCity: city,\n                arrPort: port[0]\n            }))\n        }\n        setSelectedAirport(port[0]);\n        setInputValue(`${lowerCity.replace(/\\b\\w/g, (char, index) => char.toUpperCase())} (${port[0]})`);\n        setDropdownVisible(false);\n    }\n\n    const handleCitySelection = (city: string) => {\n        var ports: string[] = [];\n        var lowerCity = city.toLowerCase();\n        var inputString : string = `${lowerCity.replace(/\\b\\w/g, (char, index) => char.toUpperCase())} `;\n        portDict[city].forEach(port => {\n            ports.push(port[0]);\n            inputString += `(${port[0]}) `;\n        })\n        if(dest === 'depCity') {\n            setValues((prevValues) => ({\n                ...prevValues,\n                depCity: city,\n                depPort: ports\n            }))\n        }\n        else if(dest === 'arrCity') {\n            setValues((prevValues) => ({\n                ...prevValues,\n                arrCity: city,\n                arrPort: ports\n            }))\n        }\n        setSelectedAirport(ports);\n        setDropdownVisible(false);\n        setInputValue(inputString);\n    }\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n            setDropdownVisible(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n          document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    useEffect(() => {\n        setInputValue(inputValue);\n        setCitiesList(citiesList);\n        setHoverOptionIndex(hoverOptionIndex);\n        setCurrListLen(currListLen);\n    }, [inputValue, citiesList, hoverOptionIndex, currListLen])\n\n\n    return (\n        <div className=\"input-dropdown\">\n            <input\n            className=\"inputText\"\n            type=\"text\"\n            value={inputValue !== selectedAirport ? inputValue : selectedAirport}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type something...\"\n            />\n            {dropdownVisible && inputValue !== \"\" && (\n                <div ref={dropdownRef} className=\"dropdown\">\n                    {citiesList.map((city, cityIndex) => {\n                        if (portDict[city]) {\n                            const totalPreviousAirports = citiesList.slice(0, cityIndex).reduce((total, prevCity) => total + (portDict[prevCity] ? portDict[prevCity].length : 0), 0);\n                            return (\n                                <div key={cityIndex} className=\"dropdownOption\">\n                                    <button className={`cityButton ${Math.round(totalPreviousAirports + cityIndex) === hoverOptionIndex ? 'hovered' : ''}`} onClick={() => handleCitySelection(city)}>\n                                        {city}\n                                    </button>\n                                    {portDict[city].map((port, portIndex) => (\n                                        <button className={`portButton ${(totalPreviousAirports + cityIndex + portIndex + 1) === hoverOptionIndex ? 'hovered': ''}`} onClick={() => handleDropdownSelection(city, port)}>\n                                            {port[1]} ({port[0]})\n                                        </button>\n                                    ))}\n                                </div>\n                            );\n                        }\n                        return null;\n                    })}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AutofillInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}