{"mappings":"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","sources":["packages/@react-spectrum/textfield/src/index.ts","packages/@react-spectrum/textfield/src/TextArea.tsx","packages/@react-spectrum/textfield/src/TextFieldBase.tsx","packages/@adobe/spectrum-css-temp/components/textfield/vars.css","packages/@react-spectrum/textfield/src/TextField.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/// <reference types=\"css-module-types\" />\n\nexport {TextArea} from './TextArea';\nexport {TextField} from './TextField';\nexport {TextFieldBase} from './TextFieldBase';\nexport type {SpectrumTextFieldProps} from '@react-types/textfield';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, useLayoutEffect} from '@react-aria/utils';\nimport React, {Ref, useCallback, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useControlledState} from '@react-stately/utils';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextArea(props: SpectrumTextFieldProps, ref: Ref<TextFieldRef>) {\n  props = useProviderProps(props);\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange,\n    ...otherProps\n  } = props;\n\n  // not in stately because this is so we know when to re-measure, which is a spectrum design\n  let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue, () => {});\n  let inputRef = useRef<HTMLTextAreaElement>(null);\n\n  let onHeightChange = useCallback(() => {\n    // Quiet textareas always grow based on their text content.\n    // Standard textareas also grow by default, unless an explicit height is set.\n    if ((isQuiet || !props.height) && inputRef.current) {\n      let input = inputRef.current;\n      let prevAlignment = input.style.alignSelf;\n      let prevOverflow = input.style.overflow;\n      // Firefox scroll position is lost when overflow: 'hidden' is applied so we skip applying it.\n      // The measure/applied height is also incorrect/reset if we turn on and off\n      // overflow: hidden in Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1787062\n      let isFirefox = 'MozAppearance' in input.style;\n      if (!isFirefox) {\n        input.style.overflow = 'hidden';\n      }\n      input.style.alignSelf = 'start';\n      input.style.height = 'auto';\n      // offsetHeight - clientHeight accounts for the border/padding.\n      input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\n      input.style.overflow = prevOverflow;\n      input.style.alignSelf = prevAlignment;\n    }\n  }, [isQuiet, inputRef, props.height]);\n\n  useLayoutEffect(() => {\n    if (inputRef.current) {\n      onHeightChange();\n    }\n  }, [onHeightChange, inputValue, inputRef]);\n\n  if (props.placeholder) {\n    console.warn('Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/TextArea.html#help-text');\n  }\n\n  let {labelProps, inputProps, descriptionProps, errorMessageProps} = useTextField({\n    ...props,\n    onChange: chain(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }, inputRef);\n\n  return (\n    <TextFieldBase\n      {...otherProps}\n      ref={ref}\n      inputRef={inputRef}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      multiLine\n      isDisabled={isDisabled}\n      isQuiet={isQuiet}\n      isReadOnly={isReadOnly}\n      isRequired={isRequired} />\n  );\n}\n\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\nlet _TextArea = React.forwardRef(TextArea);\nexport {_TextArea as TextArea};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {classNames, createFocusableRef} from '@react-spectrum/utils';\nimport {Field} from '@react-spectrum/label';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressEvents} from '@react-types/shared';\nimport React, {cloneElement, forwardRef, HTMLAttributes, InputHTMLAttributes, LabelHTMLAttributes, ReactElement, Ref, RefObject, TextareaHTMLAttributes, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport styles from '@adobe/spectrum-css-temp/components/textfield/vars.css';\nimport {useFocusRing} from '@react-aria/focus';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TextFieldBaseProps extends Omit<SpectrumTextFieldProps, 'onChange'>, PressEvents {\n  wrapperChildren?: ReactElement | ReactElement[],\n  inputClassName?: string,\n  validationIconClassName?: string,\n  multiLine?: boolean,\n  labelProps?: LabelHTMLAttributes<HTMLLabelElement>,\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  descriptionProps?: HTMLAttributes<HTMLElement>,\n  errorMessageProps?: HTMLAttributes<HTMLElement>,\n  inputRef?: RefObject<HTMLInputElement | HTMLTextAreaElement>,\n  loadingIndicator?: ReactElement,\n  isLoading?: boolean,\n  disableFocusRing?: boolean\n}\n\nfunction TextFieldBase(props: TextFieldBaseProps, ref: Ref<TextFieldRef>) {\n  let {\n    validationState,\n    icon,\n    isQuiet = false,\n    isDisabled,\n    multiLine,\n    autoFocus,\n    inputClassName,\n    wrapperChildren,\n    labelProps,\n    inputProps,\n    descriptionProps,\n    errorMessageProps,\n    inputRef: userInputRef,\n    isLoading,\n    loadingIndicator,\n    validationIconClassName,\n    disableFocusRing\n  } = props;\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let domRef = useRef<HTMLDivElement>(null);\n  let defaultInputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n  let inputRef = userInputRef || defaultInputRef;\n\n  // Expose imperative interface for ref\n  useImperativeHandle(ref, () => ({\n    ...createFocusableRef(domRef, inputRef),\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n\n  let ElementType: React.ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid' && !isDisabled;\n\n  if (icon) {\n    let UNSAFE_className = classNames(\n      styles,\n      icon.props && icon.props.UNSAFE_className,\n      'spectrum-Textfield-icon'\n    );\n\n    icon = cloneElement(icon, {\n      UNSAFE_className,\n      size: 'S'\n    });\n  }\n\n  let validationIcon = isInvalid ? <AlertMedium /> : <CheckmarkMedium />;\n  let validation = cloneElement(validationIcon, {\n    UNSAFE_className: classNames(\n      styles,\n      'spectrum-Textfield-validationIcon',\n      validationIconClassName\n    )\n  });\n\n  let {focusProps, isFocusVisible} = useFocusRing({\n    isTextInput: true,\n    autoFocus\n  });\n\n  let textField = (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-Textfield',\n          {\n            'spectrum-Textfield--invalid': isInvalid,\n            'spectrum-Textfield--valid': validationState === 'valid' && !isDisabled,\n            'spectrum-Textfield--loadable': loadingIndicator,\n            'spectrum-Textfield--quiet': isQuiet,\n            'spectrum-Textfield--multiline': multiLine,\n            'focus-ring': !disableFocusRing && isFocusVisible\n          }\n        )\n      }>\n      <ElementType\n        {...mergeProps(inputProps, hoverProps, focusProps)}\n        ref={inputRef as any}\n        rows={multiLine ? 1 : undefined}\n        className={\n          classNames(\n            styles,\n            'spectrum-Textfield-input',\n            {\n              'spectrum-Textfield-inputIcon': icon,\n              'is-hovered': isHovered\n            },\n            inputClassName\n          )\n        } />\n      {icon}\n      {validationState && !isLoading && !isDisabled ? validation : null}\n      {isLoading && loadingIndicator}\n      {wrapperChildren}\n    </div>\n  );\n\n  return (\n    <Field\n      {...props}\n      labelProps={labelProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      wrapperClassName={\n        classNames(\n          styles,\n          'spectrum-Textfield-wrapper',\n          {\n            'spectrum-Textfield-wrapper--quiet': isQuiet\n          }\n        )\n      }\n      showErrorIcon={false}\n      ref={domRef}>\n      {textField}\n    </Field>\n  );\n}\n\nconst _TextFieldBase = forwardRef(TextFieldBase);\nexport {_TextFieldBase as TextFieldBase};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {forwardRef, Ref, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextField(props: SpectrumTextFieldProps, ref: Ref<TextFieldRef>) {\n  props = useProviderProps(props);\n\n  let inputRef = useRef<HTMLInputElement>(null);\n  let {labelProps, inputProps, descriptionProps, errorMessageProps} = useTextField(props, inputRef);\n\n  if (props.placeholder) {\n    console.warn('Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/TextField.html#help-text');\n  }\n\n  return (\n    <TextFieldBase\n      {...props}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      ref={ref}\n      inputRef={inputRef} />\n  );\n}\n\n/**\n * TextFields are text inputs that allow users to input custom text entries\n * with a keyboard. Various decorations can be displayed around the field to\n * communicate the entry requirements.\n */\nconst _TextField = forwardRef(TextField);\nexport {_TextField as TextField};\n"],"names":[],"version":3,"file":"module.js.map"}